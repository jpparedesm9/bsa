var LATFO = {

    COMMONS: {
        getCapitalizeCase: function(string) {
            return string.replace(/\w\S*/g, function(tStr) {
                return tStr.charAt(0).toUpperCase() + tStr.substr(1).toLowerCase();
            });
        },
        getPercentage: function(amounts, porcent) {
            var sum = 0;
            amounts.forEach(function(amount) {
                sum += amount;
            });
            return (sum * porcent) / 100;
        }
    },

    INBOX: {

        addTaskHeader: function(taskHeader, title, value, rowNumber) {

            rowNumber = rowNumber === undefined ? 0 : rowNumber;

            if (title != null && value != null) {

                if (title == "title") {
                    taskHeader.title = LATFO.COMMONS.getCapitalizeCase(value);
                } else {

                    var update = false;
                    taskHeader.subtitle = taskHeader.subtitle == null ? [] : taskHeader.subtitle;
                    taskHeader.subtitle[rowNumber] = taskHeader.subtitle[rowNumber] == null ? [] : taskHeader.subtitle[rowNumber];

                    for (var i = 0; i < taskHeader.subtitle.length; i++) {
                        if (i == rowNumber) {
                            for (var j = 0; j < taskHeader.subtitle[i].length; j++) {
                                if (taskHeader.subtitle[i][j].title == title) {
                                    taskHeader.subtitle[i][j].value = value;
                                    update = true;
                                    break;
                                }
                            }
                            if (!update) {
                                taskHeader.subtitle[i].push({
                                    title: title,
                                    value: value
                                });
                            }
                            break;
                        }
                    }

                }
            }
        },

        updateTaskHeader: function(taskHeader, eventArgs, groupViewHeader) {
            eventArgs.commons.api.vc.removeChildVc('taskHeader');

            var nav = eventArgs.commons.api.navigation;

            nav.customAddress = {
                id: 'taskHeader',
                url: 'inbox/templates/header-task.html',
                useMinification: false
            };

            nav.scripts = [{
                module: cobis.modules.INBOX,
                files: ['/inbox/controllers/header-task-ctrl.js']
            }];

            nav.customDialogParameters = {
                taskHeader: taskHeader
            };

            nav.registerCustomView(groupViewHeader);
        }
    }
};

var BMTRC = {
    CONSTANTS: {
        Stage: {
            INGRESO: 'INGRESO'
        },
        TypeOrigin: {
            FLUJO: 'FLUJO',
            INGRESO: 'INGRESO',
            CONSULTA: 'CONSULTA'
        },
        ValidationStatus: {
            SUCCESS: 'APROBADO',
            REJECTED: 'RECHAZADO',
            PENDING: 'PENDIENTE'
        }
    },
    CONVERT: {
        DATE: {
            FromStringMDY: function(strignValue) {
                return new Date(strignValue.substring(6, 10), strignValue.substring(0, 2) - 1, strignValue.substring(3, 5));
            }
        },
        NUMBER: {
            Format: function(stringValue, stringAdd, finalLength) {
                for (i = stringValue.toString().length; i < parseInt(finalLength); i++) {
                    stringValue = stringAdd + stringValue;
                }
                return stringValue;
            }
        },
        CURRENCY: {
            Format: function(stringValue, intPrecision) {
                return stringValue.toFixed(parseInt(intPrecision)).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
            }
        },
        getCapitalizeCase: function(string) {
            return string.replace(/\w\S*/g, function(tStr) {
                return tStr.charAt(0).toUpperCase() + tStr.substr(1).toLowerCase();
            });
        }
    },
    SERVICES: {
        BIOCHECK: {
            validateBiocheck: function(args, environment, localIp) {
                var rowData = args.rowData;
                console.log("IP local: " + localIp);
                var clientInfo = {
                    "ocr": rowData.ocr,
                    "cic": rowData.cic,
                    "nombre": rowData.customerName,
                    "apellidoPaterno": rowData.surname,
                    "apellidoMaterno": rowData.motherSurname,
                    "anioRegistro": rowData.year,
                    "anioEmision": rowData.yearEmission,
                    "numeroEmisionCredencial": rowData.credentialNumber,
                    "claveElector": rowData.voterKey,
                    "curp": rowData.curp,
                    "ipLocal": localIp,
                    "idUsuario": "",
                    "idSesionCliente": "",
                    "idCliente": "" + rowData.idCustomer,
                    "lugarNacimiento": rowData.birthCity,
                    "lugarNacimientoEquivalente": "",
                    "fechaNacimiento": rowData.birthDay,
                    "idCanal": rowData.channel,
                    "buc": rowData.buc
                };
                cobis.showMessageWindow.loading(true);
                $.ajax({
                    url: "${contextPath}/resources/cobis/web/OrchestrationBiometricServiceRest/generateOpaqueToken", //token opaco
                    type: "POST",
                    data: JSON.stringify(clientInfo),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    error: function(response) {
                        console.error(response);
                        cobis.showMessageWindow.loading(false);
                        //MSG:Se produjo un error, favor consultar con el Administrador
                        cobis.getMessageManager().showMessagesError("BMTRC.MSG_BMTRC_SEPRODUAD_14527", null, 6000, false);
                    }
                }).then(function(data) {
                    BMTRC.SERVICES.BIOCHECK.saveAndEvaluateBiocheckData(rowData, data, args, environment);
                });

            },
            saveAndEvaluateBiocheckData: function(rowData, response, args, environment) {
                var api = args.commons.api;
                var dataSend = {};

                if (BMTRC.SERVICES.BIOCHECK.validateOpakeTokenResponse(response, args)) {
                    if (rowData.withoutFingerprintValue !== 'S') {

                        dataSend = {
                            "response": {
                                "fechaHoraPeticion": "2020-09-08T16:31:32.310",
                                "indiceSolicitud": "768485",
                                "dataResponse": {
                                    "respuestaSituacionRegistral": {
                                        "tipoSituacionRegistral": "VIGENTE",
                                        "tipoReporteRoboExtravio": null
                                    },
                                    "respuestaComparacion": {
                                        "anioRegistro": null,
                                        "claveElector": null,
                                        "apellidoPaterno": "false",
                                        "anioEmision": null,
                                        "numeroEmisionCredencial": null,
                                        "nombre": "false",
                                        "curp": "false",
                                        "apellidoMaterno": "false",
                                        "ocr": null
                                    },
                                    "codigoRespuestaDatos": "0"
                                },
                                "minutiaeResponse": {
                                    "codigoRespuestaMinucia": "0",
                                    "similitud2": "100.0%",
                                    "similitud7": "0.0%"
                                },
                                "tiempoProcesamiento": "1118",
                                "codigoRespuesta": "0"
                            },
                            "signature": {
                                "signedInfo": {
                                    "canonicalizationMethod": {
                                        "algorithm": "http://www.w3.org/TR/2001/REC-xml-c14n-20010315"
                                    },
                                    "signatureMethod": {
                                        "algorithm": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
                                    },
                                    "reference": {
                                        "digestMethod": {
                                            "algorithm": "http://www.w3.org/2001/04/xmlenc#sha256"
                                        },
                                        "digestValue": "flNNcvHFW7cgcgfqUj81fxGQ6GKI5KKoj7yi02db8AE=",
                                        "uri": "#DATA"
                                    }
                                },
                                "signatureValue": "WLRVrCH0HjvCvfQCGwxC1N7NIL7av9TgLyA0Uo0qt/hR4Ta2GaofshEmKq7Ve/QWV8Yw37y6wSCp\nFSN0V8fS77ldrAA36Ayc4QS5MdkMLvLAjQhVtlF770ZaD/VAvN18fuNgzYREisTNGHDUJjuciM62\nDQlBl+gtEVQjmZFmnfCl5panIxKuxRa34H9Oi9tkuEVpbi0uPkYY0pKUYnZ1NNfZ2DQHLBwV8CLD\nXNZrj8rck8UTMGA31lwZxtxufW66SCii2XP7JqVXCT4tUMJmDDJErf+EgmYt8+5J8xsfjRixn8QZ\n3KM7xwFyeEj0tNn29kchBt+60qP+7H56pqp+QH2V/MMTT+gFGSuZasa0ZQ+z4ADZu7GB9fq9wSq8\n70yoWZjPcPSyPTZ78/QX4Li2E6o1sJjjcFpslOjb3h1+tKGG4FUAEE+HpB2Ow7czyLriOuVaGqaz\n9Q9+b4QT/bim+z7BT51HmRFlspDH7Sp24TTXT5S+bR9T6/k8Ru4Q1xlj+ng4X33NdedUtGYEdgC5\n6TgxP1WYFjp2koUyjbwpCL0YTHBT/CkCatxj2eXV1/zKHWBlSCjWDmVUzxunhR7HI55c2Jv0DuAw\ngX60yKc+e+yZdx3O4bTQlyICkaLMXSu8EDBWZkbi47qpxKIgX1D1NCPpaNJwA9aoj3zlJch4nLs=",
                                "keyInfo": {
                                    "x509Data": {
                                        "x509SerialNumber": "produccion_2018"
                                    }
                                }
                            },
                            "timeStamp": null,
                            "hash": "bc332b4772d0309bb6c16401c19510378b0a53677d0a00c76fc83a649ba5f883"
                        };

                        dataSend.validateFingerPrint = null;
                        dataSend.flag = rowData.withoutFingerprintValue;
                        dataSend.amount = rowData.amount;
                        dataSend.sequential = rowData.sequential;
                        dataSend.instanceProcess = args.commons.api.parentVc.model.Task.processInstanceIdentifier;

                        BMTRC.SERVICES.BIOCHECK.saveBiometricInfo(dataSend, rowData, args);
                        cobis.showMessageWindow.loading(false);
                    } else {
                        dataSend.response = null;
                        dataSend.signature = null;
                        dataSend.amount = rowData.amount;
                        if (response.data != null) {
                            dataSend.sequential = response.data.sequential;
                        } else {
                            dataSend.sequential = null;
                        }
                        dataSend.instanceProcess = args.commons.api.parentVc.model.Task.processInstanceIdentifier;

                        if (rowData.withoutFingerprint) {
                            dataSend.validateFingerPrint = 'S';
                        }

                        //servicio guardado
                        BMTRC.SERVICES.BIOCHECK.saveBiometricInfo(dataSend, rowData, args);
                    }
                } else {
                    cobis.showMessageWindow.loading(false);
                }
            },
            transformResponseBiocheck: function(response) {
                var resObj = response.replace(/\\"/g, "\"");
                resObj = resObj.replace(/"{/g, "{");
                resObj = resObj.replace(/}"/g, "}");
                resObj = resObj.replace('Respuesta:', "");
                resObj = resObj.replace('response ', "response");
                return JSON.parse(resObj);
            },
            validateOpakeTokenResponse: function(response, args) {
                var result = true;
                var error = response.data.errorMessage;
                if (angular.isDefined(error) && error != null) {
                    if (angular.isDefined(error.status) && error.status != null) {
                        result = false;
                        cobis.getMessageManager().showMessagesError(response.data.errorMessage.status.statusDesc, null, 1000, false);
                    }
                    if (angular.isDefined(error.error_description) && error.error_description != null) {
                        result = false;
                        cobis.getMessageManager().showMessagesError(error.error_description, null, 1000, false);
                    }
                }
                return result;
            },
            getLocalIpAddress: function(onNewIP) {
                //compatibility for firefox and chrome
                var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
                var pc = new myPeerConnection({
                        iceServers: []
                    }),
                    noop = function() {},
                    localIPs = {},
                    ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
                    key;

                function iterateIP(ip) {
                    if (!localIPs[ip]) onNewIP(ip);
                    localIPs[ip] = true;
                }
                //create a bogus data channel
                pc.createDataChannel("");

                // create offer and set local description
                pc.createOffer().then(function(sdp) {
                    sdp.sdp.split('\n').forEach(function(line) {
                        if (line.indexOf('candidate') < 0) return;
                        line.match(ipRegex).forEach(iterateIP);
                    });

                    pc.setLocalDescription(sdp, noop, noop);
                }).catch(function(reason) {
                    // An error occurred, so handle the failure to connect
                    console.log("Error en la obtencion de la IP local: ", reason);
                });

                //listen for candidate events
                pc.onicecandidate = function(ice) {
                    if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
                    ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
                };
            },

            openWebSocket: function(data, rowData, args, response) {
                cobis.showMessageWindow.loading(true);
                try {
                    var ws = new WebSocket("ws://localhost:8083/validacion");
                    //Abrir conexion
                    ws.onopen = function() {
                        console.log("Connection established!");
                        ws.send(data);
                    };

                    //Respuesta websocket
                    ws.onmessage = function(evt) {
                        console.log(evt);
                        var biocheckResponse = evt.data;
                        var dataSend = {};
                        if (biocheckResponse != null && biocheckResponse != undefined && biocheckResponse != "") {
                            console.log("La respuesta de Biocheck es: " + biocheckResponse);

                            var objRes = BMTRC.SERVICES.BIOCHECK.transformResponseBiocheck(biocheckResponse);
                            var existError = (angular.isDefined(objRes.RespuestaIne.errores) && null !== objRes.RespuestaIne.errores) ? true : false;
                            if (angular.isDefined(objRes.CodigoSalida) && objRes.CodigoSalida === 0 && !existError) {
                                dataSend = objRes.RespuestaIne;
                                dataSend.validateFingerPrint = null;

                                dataSend.flag = rowData.withoutFingerprintValue;
                                dataSend.amount = rowData.amount;

                                if (response.data != null) {
                                    dataSend.sequential = response.data.sequential;
                                } else {
                                    dataSend.sequential = null;
                                }

                                dataSend.instanceProcess = args.commons.api.parentVc.model.Task.processInstanceIdentifier;

                                //Lamada servicio de guardado
                                BMTRC.SERVICES.BIOCHECK.saveBiometricInfo(dataSend, rowData, args);
                            } else {
                                //manejo de errores biocheck
                                BMTRC.SERVICES.BIOCHECK.biocheckErrorMessageManagement(objRes.CodigoSalida);
                            }


                        } else {
                            //MSG:Error al recuperar informacion de Biocheck, por favor vuelva a intentarlo
                            cobis.getMessageManager().showMessagesError("BMTRC.MSG_BMTRC_ERRORALKC_66855", null, 1000, false);
                        }

                    };

                    //Cierre de conexion
                    ws.onclose = function() {
                        console.log("Connection is closed...");
                        cobis.showMessageWindow.loading(false);
                    };

                    ws.onerror = function(event) {
                        //MSG:Error de conexion con el dispositivo de Biocheck, favor contactar al Administrador
                        cobis.getMessageManager().showMessagesError("BMTRC.MSG_BMTRC_ERRORDEDT_76834", null, 1000, false);
                    };
                } catch (error) {
                    console.log(error);
                }
            },
            saveBiometricInfo(dataSend, rowData, args) {
                var api = args.commons.api;
                $.ajax({
                    url: "${contextPath}/resources/cobis/web/OrchestrationBiocheckServiceRest/save/" + rowData.idCustomer, //guardar info biocheck
                    type: "POST",
                    data: JSON.stringify(dataSend),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    error: function(response) {
                        cobis.showMessageWindow.loading(false);
                        //MSG:Se produjo un error, favor consultar con el Administrador
                        cobis.getMessageManager().showMessagesError("BMTRC.MSG_BMTRC_SEPRODUAD_14527", null, 6000, false);
                    }
                }).then(function(data) {
                    rowData.validationStatus = data.response;
                    if (api.parentVc.model.Task.bussinessInformationStringTwo == 'REVOLVENTE') {
                        api.parentVc.model.InboxContainerPage.HiddenInCompleted = "YES";
                    }
                    api.vc.executeCommand('VA_VABUTTONVNZFJKQ_704515', 'Actualizar Grilla', validator, false, false, '', false);
                    //MSG:Lectura de huellas finalizada
                    cobis.getMessageManager().showMessagesSuccess("BMTRC.MSG_BMTRC_LECTURAAE_97366", null, 6000, false);
                    cobis.showMessageWindow.loading(false);
                });
            },
            biocheckErrorMessageManagement(errorCode) {
                var errorMessage = null;
                if (angular.isDefined(errorCode)) {
                    switch (errorCode) {
                        case 0:
                            errorMessage = null;
                            break;
                        case 1:
                            //MSG: El equipo no cuenta con las licencias necesarias para la captura de huellas digitales. 
                            errorMessage = "BMTRC.MSG_BMTRC_ELEQUIPAS_33291";
                            break;
                        case 2:
                            //MSG: No se cuenta con las captura de las huellas de los indices izquierdo y derecho.
                            errorMessage = "BMTRC.MSG_BMTRC_NOSECUEOD_61157";
                            break;
                        case 3:
                            //MSG: Captura de huellas cancelada por el usuario.
                            errorMessage = "BMTRC.MSG_BMTRC_CAPTURAUO_79368";
                            break;
                        case 4:
                            //MSG: Ventana cerrada sin concluir captura de huellas.
                            errorMessage = "BMTRC.MSG_BMTRC_VENTANASU_43087";
                            break;
                        case 5:
                            //MSG: No se proporcionaron todos los datos obligatorios requeridos por el INE.
                            errorMessage = "BMTRC.MSG_BMTRC_NOSEPRORA_80890";
                            break;
                        case 6:
                            //MSG: Error al consultar información del INE, favor consultar con el Administrador.
                            errorMessage = "BMTRC.MSG_BMTRC_ERRORALNM_38851";
                            break;
                        case 7:
                            //MSG: Error en la verificación del token Opaco, favor consultar con el Administrador.
                            errorMessage = "BMTRC.MSG_BMTRC_ERRORENTI_86326";
                            break;
                        case 8:
                        case 9:
                            //MSG: Error en la generación del token de autorización, favor consultar con el Administrador.
                            errorMessage = "BMTRC.MSG_BMTRC_ERRORENNA_71381";
                            break;
                        case 10:
                            //MSG: El lector no pudo capturar las huellas, favor consultar con el Administrador.
                            errorMessage = "BMTRC.MSG_BMTRC_ELLECTOPP_46939";
                            break;
                        case 11:
                            //MSG: Ya existe un flujo de captura de huellas digitales en proceso y sólo se puede ejecutar uno a la vez.
                            errorMessage = "BMTRC.MSG_BMTRC_YAEXISTDU_30643";
                            break;

                    }
                    if (errorMessage !== null) {
                        cobis.getMessageManager().showMessagesError(errorMessage, null, 6000, false);
                    } else {
                        //MSG: Se produjo un error en la lectura de huellas digitales, favor contacte al Administrador
                        cobis.getMessageManager().showMessagesError("BMTRC.MSG_BMTRC_SEPRODURA_64143", null, 6000, false);
                    }

                }
            }

        }
    }
};