
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.ucsp.service;

import cobiscorp.ecobis.ucsp.request.dto.AverageBalanceClientRequest;
import cobiscorp.ecobis.ucsp.request.dto.QueryClientByParametersNextRequest;
import cobiscorp.ecobis.ucsp.request.dto.QueryClientReferencesRequest;
import cobiscorp.ecobis.ucsp.request.dto.QueryLegalInformationRequest;
import cobiscorp.ecobis.ucsp.request.dto.QueryLegalRelationshipsRequest;
import cobiscorp.ecobis.ucsp.request.dto.QueryPartnersRequest;

import com.cobiscorp.cobis.web.services.commons.model.ServiceResponse;
import com.cobiscorp.ecobis.customer.commons.dto.SearchCustomerDTO;
import com.cobiscorp.ecobis.customer.commons.dto.SearchGroupDTO;


public interface IClientService
{

    /**
     * Method averageBalanceClient, get average balance of a customer
     * @param averageBalanceClientParam <code>AverageBalanceClientRequest<code>
     * @return ServiceResponse
     */
	ServiceResponse averageBalanceClient(AverageBalanceClientRequest averageBalanceClientParam);	
	/**
	 * Method used to get complete information of defined Customer.
	 * 
	 * @param customerCode
	 *            it's the Client/Customer code.
	 * @return ServiceResponse whit a information list of the specific Customer.
	 */	
	ServiceResponse queryClient(Integer customerCode);	
	/**
	 * Method to get a list of Customers by parameters.
	 * 
	 * @param searchCustomer
	 *            it's a DTO used to send attributes such as: ComercialName,
	 *            ClientName, ClientLastName, ClientSecondLastName,
	 *            ClientSecondName, Sub_type, Type, ClientNumber, CedRuc,
	 *            ComercialName
	 * @return a List of CustomerDTO whit this information:
	 * @see SearchCustomerDTO
	 * @see ServiceResponse with a list CustomerDTO
	 */
	ServiceResponse queryClientByParameters(SearchCustomerDTO inputClient);
	/**
	 * Method to get customer information by parameters next
	 * @param queryClientByParametersNextParam <code>QueryClientByParametersNextRequest<code>
	 * @return ServiceResponse
	 */
	ServiceResponse queryClientByParametersNext(QueryClientByParametersNextRequest queryClientByParametersNextParam);
	/**
	 * Method to get a list of Customer's addresses by customer code.
	 * 
	 * @param customerCode
	 *            it's a customer code for the consultation.
	 * @return ServiceResponse with a list of customers addresses.
	 */
	ServiceResponse queryClientDirections(Integer customerCode);
	/**
	 * Method used to get the Customer score.
	 * 
	 * @param customerCode
	 *            it's the Client/Customer code.
	 * @return ServiceResponse with a list with the customer score.
	 */
	ServiceResponse queryClientRate(Integer customerCode);
	
	/**
	 * Method used to get references customer.
	 * 
	 * @param queryClientReferencesParam
	 *            <code>QueryClientReferencesRequest<code>
	 * @return ServiceResponse with references customer.
	 */
	ServiceResponse queryClientReferences(QueryClientReferencesRequest queryClientReferencesParam);
	/**
	 * Method used to get customer type by the Client code.
	 * 
	 * @param customerCode
	 *            <code>Integer<code>, it's the Customer code.
	 * @return ServiceResponse with a string with the type of customer.
	 */
	ServiceResponse queryClientType(Integer customerCode);
	/**
	 * Get information of consolidate position by customer id
	 * @param customerCode <code>Integer<code>
	 * @return ServiceResponse whit a list <code>ConsolidatePositionDTO</code>
	 */
	ServiceResponse queryConsolidatedPosition(Integer customerCode);
	/**
	 * Method used to get a economic group by the code.
	 * 
	 * @param searchGroup
	 *            it's the group to find.
	 * @return ServiceResponse whit a list of economic group.
	 */
	ServiceResponse queryGroup(SearchGroupDTO searchGroup);
	/**
	 * Method used to get detail group by group code.
	 * 
	 * @param groupCode
	 *            <code> Integer <code>, it's the group code.
	 * @return ServiceResponse whit a EconomicGroupDTO object with detailed information of group
	 */
	ServiceResponse queryGroupDetail(Integer groupCode);
	/**
	 * Method used to get all members of group
	 * 
	 * @param groupCode
	 *            <code>Integer<code>, it's the group code.
	 * @return ServiceResponse whit a CustomerDTO object list , with information of members of group
	 */
	ServiceResponse queryGroupMembers(Integer groupCode);
	/**
	 * Method used to get complete information for companies
	 * 
	 * @param customerCode <code> Integer <code>
	 *            it's the Client/Customer code.
	 * @return A information list of the specific company.
	 */
	ServiceResponse queryLegalClient(Integer customerCode);
	/**
	 * Method used to get legal information
	 * 
	 * @param queryLegalInformationParam <code> QueryLegalInformationRequest <code>
	 * @return ServiceResponse.
	 */
	ServiceResponse queryLegalInformation(QueryLegalInformationRequest queryLegalInformationParam);
	/**
	 * Method used to get legal relationships
	 * 
	 * @param queryLegalRelationshipsParam <code> QueryLegalRelationshipsRequest <code>
	 * @return ServiceResponse.
	 */
	ServiceResponse queryLegalRelationships(QueryLegalRelationshipsRequest queryLegalRelationshipsParam);
	/**
	 * Method used to get partners
	 * 
	 * @param queryPartnersParam <code> QueryPartnersRequest <code>
	 * @return ServiceResponse.
	 */
	ServiceResponse queryPartners(QueryPartnersRequest queryPartnersParam);
	
}