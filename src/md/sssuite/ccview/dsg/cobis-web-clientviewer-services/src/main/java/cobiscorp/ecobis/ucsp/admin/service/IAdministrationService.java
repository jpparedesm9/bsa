/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.ucsp.admin.service;

import java.util.List;

import com.cobiscorp.cobis.web.services.commons.model.ServiceResponse;
import com.cobiscorp.ecobis.clientviewer.admin.dto.DefaultProductAdministratorDTO;
import com.cobiscorp.ecobis.clientviewer.admin.dto.ManagementContentSectionDTO;
import com.cobiscorp.ecobis.clientviewer.admin.dto.ManagementContentSectionRoleDTO;
import com.cobiscorp.ecobis.clientviewer.admin.dto.ProductAdministratorDTO;

public interface IAdministrationService {
	/**
	 * Method defaultConfigurationVCC, returns the parameterization default of
	 * consolidated view
	 * 
	 * @return ServiceResponse with a List <code>ProductAdministratorDTO<code>
	 */
	ServiceResponse defaultConfigurationVCC();

	/**
	 * Method deleteConfigurationVCC, remove the consolidated view configuration
	 * associated with a role. receives as parameters the role code.
	 * 
	 * @param roleCode
	 *            = Integer
	 */
	ServiceResponse deleteConfigurationVCC(Integer roleCode);

	/**
	 * Method getAllRoleAssociatesVCC, get the roles associated to a product
	 */
	ServiceResponse getAllRoleAssociatesVCC();

	/**
	 * Method getAllRoleConfigurationVCC, gets a list of all roles configured in
	 * administrator of consolidated view
	 * 
	 * @return ServiceResponse with a List <code>ProductAdministratorDTO<code>
	 */
	ServiceResponse getAllRoleConfigurationVCC();

	/**
	 * Method insertConfigurationVCC, insert configuration of administrator
	 * consolidated view receives as parameter the role code and role name .
	 * 
	 * @param idRole
	 *            = Integer
	 * @param nameRole
	 *            = String
	 */
	ServiceResponse insertConfigurationVCC(Integer IdRole, String nameRole);

	/**
	 * Method queryConfigurationVCC, gets a list of all products with which is
	 * associated a role through the role code sent as parameter
	 * 
	 * @param roleCode
	 *            = Integer
	 * @return ServiceResponse with a List <code>ProductAdministratorDTO<code>
	 */
	ServiceResponse queryConfigurationVCC(Integer roleCode);

	/**
	 * Method updateConfigurationVCC, updates the configuration of administrator
	 * consolidated view
	 * 
	 * @param updateProductAdministrator
	 *            = ProductAdministratorDTO
	 */
	ServiceResponse updateConfigurationVCC(
			ProductAdministratorDTO updateProductAdministrator);

	/**
	 * Method getConfigurationServicesVCC, gets services configuratios of VCC
	 * 
	 * @return
	 */
	ServiceResponse getConfigurationServicesVCC();

	/**
	 * 
	 * @return
	 */
	ServiceResponse getAllProductAdministratorDefaultVCC();

	/**
	 * Method to get ManagementContentSection by rol into dinamic sections
	 * 
	 * @return
	 */
	ServiceResponse getAllManagementContentSectionVCC();

	/**
	 * Method to get ManagementContentSectionRole by rol into dinamic sections
	 * 
	 * @return
	 */
	ServiceResponse getAllManagementContentSectionRole();

	/**
	 * Method to get ManagementContentSectionRole by role into dinamic sections
	 * 
	 * @return
	 */
	ServiceResponse getManagementContentSectionRoleByRoleVCC();

	/**
	 * Method to get ManagementContentSectionRole by section into dinamic
	 * sections
	 * 
	 * @return
	 */
	ServiceResponse getManagementContentSectionRoleBySectionVCC(
			Integer manConSec);

	/**
	 * Method to delete ManagementContentSection by id sections
	 * 
	 * @param code
	 *            = Integer
	 * @return number of deleted records
	 * @author gvillamagua
	 */
	ServiceResponse deleteManagementContentSectionById(Integer code);

	/**
	 * Method to delete ManagementContentSectionRol by id
	 * 
	 * @param code
	 *            = Integer
	 * @return number of deleted records
	 * @author gvillamagua
	 */
	ServiceResponse deleteManagementContentSectionRole(Integer code,
			Integer section);

	/**
	 * Method to delete ManagementContentSectionRol by id sections
	 * 
	 * @param code
	 *            = Integer
	 * @return number of deleted records
	 * @author gvillamagua
	 */
	ServiceResponse deleteManagementContentSectionRoleBySection(Integer code);

	/**
	 * Method to update ManagementContentSection by id sections
	 * 
	 * @param entity
	 *            = ManagementContentSectionDTO
	 * @return number of updated record
	 * @author gvillamagua
	 */
	ServiceResponse updateManagementContentSectionById(
			ManagementContentSectionDTO entity);

	/**
	 * Method to insert ManagementContentSection
	 * 
	 * @param entity
	 *            = ManagementContentSectionDTO
	 * @return integer 1
	 * @author gvillamagua
	 */
	ServiceResponse insertManagementContentSection(
			ManagementContentSectionDTO entity);

	/**
	 * Method to insert ManagementContentSectionRole
	 * 
	 * @param entity
	 *            = ManagementContentSectionRoleDTO
	 * @return integer 1
	 * @author gvillamagua
	 */
	ServiceResponse insertManagementContentSectionRole(
			ManagementContentSectionRoleDTO entity);

	/**
	 * Method to delete DefaultProductAdministrator by id
	 * 
	 * @param code
	 *            = Double
	 * @return ServiceResponse
	 * @author ecarrion
	 */
	ServiceResponse deleteDefaultProductAdministratorById(Double code);

	/**
	 * Method to update DefaultProductAdministrator by id sections
	 * 
	 * @param entity
	 *            = DefaultProductAdministratorDTO
	 * @return ServiceResponse
	 * @author ecarrion
	 */
	ServiceResponse updateDefaultProductAdministratorById(
			DefaultProductAdministratorDTO entity);

	/**
	 * Method to insert DefaultProductAdministrator
	 * 
	 * @param entity
	 *            = DefaultProductAdministratorDTO
	 * @return ServiceResponse
	 * @author ecarrion
	 */
	ServiceResponse insertDefaultProductAdministrator(
			DefaultProductAdministratorDTO entity);

	/**
	 * Method to get configuration dinamic for VCC by typeClient
	 * 
	 * @return ServiceResponse
	 * @author ecarrion
	 */
	ServiceResponse getAllProductAdministratorDefaultDinamicByType(
			String typeClient, String typeClientParent);

	/**
	 * Method to get configuration dinamic for VCC by parent
	 * 
	 * @return ServiceResponse
	 * @author ecarrion
	 */
	ServiceResponse getProductAdministratorDefaultDinamicByParent(Double parent);

	/**
	 * Method to get DTOs for VCC by parent
	 * 
	 * @return ServiceResponse
	 * @author ecarrion
	 */
	ServiceResponse getAllDtosByParent(Integer parent);
}