/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.ucsp.external.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.ReferenceCardinality;
import org.apache.felix.scr.annotations.Service;

import cobiscorp.ecobis.businessprocess.creditmanagement.dto.ClientExceptionRequest;
import cobiscorp.ecobis.commons.dto.MessageTO;
import cobiscorp.ecobis.commons.dto.ServiceRequestTO;
import cobiscorp.ecobis.commons.dto.ServiceResponseTO;
import cobiscorp.ecobis.contactmanagement.dto.Customer;
import cobiscorp.ecobis.contactmanagement.dto.CustomerRequest;
import cobiscorp.ecobis.cts.integration.services.ICTSServiceIntegration;
import cobiscorp.ecobis.ucsp.external.service.IClientExternalService;

import com.cobiscorp.cobis.commons.log.ILogger;
import com.cobiscorp.cobis.commons.log.LogFactory;
import com.cobiscorp.cobis.web.services.commons.model.Message;
import com.cobiscorp.cobis.web.services.commons.model.ServiceResponse;
import com.cobiscorp.cobis.web.services.commons.utils.ServiceBase;

@Path("/cobis/web/clientviewer/external/ClientExternalService")
@Component
@Service({ IClientExternalService.class })
public class ClientExternalService extends ServiceBase implements
		IClientExternalService {

	@Reference(bind = "setServiceIntegration", unbind = "unsetServiceIntegration", cardinality = ReferenceCardinality.MANDATORY_UNARY)
	private ICTSServiceIntegration serviceIntegration;

	private ILogger logger = LogFactory.getLogger(ClientExternalService.class);

	private static final String QUERY_CLIENT_EXCEPTION_SERVICE_ID = "Businessprocess.Creditmanagement.RuleByRoleQuery.QueryExceptionByClient";

	/*
	 * (non-Javadoc)
	 * 
	 * @see cobiscorp.ecobis.ucsp.external.service.IClientExternalService#
	 * queryClientException(java.lang .Integer)
	 */
	@Override
	@PUT
	@Path("/queryClientException/{customerCode}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse queryClientException(
			@PathParam("customerCode") Integer customerCode) {
		try {
			if (logger.isDebugEnabled()) {
				logger.logDebug("queryClientException start");
			}

			ServiceRequestTO serviceRequestTO = new ServiceRequestTO();
			ClientExceptionRequest clientExcep = new ClientExceptionRequest();
			clientExcep.setIdClient(customerCode);
			serviceRequestTO.addValue("inClientExceptionRequest", clientExcep);
			ServiceResponse serviceResponse = execute(this.serviceIntegration, logger,
					QUERY_CLIENT_EXCEPTION_SERVICE_ID, serviceRequestTO);
			return serviceResponse;
		} catch (Exception ex) {
			logger.logError(ex.getMessage());
			return this.manageException(ex, logger);
		}
	}

	private static final String QUERY_CUSTOMER_VISITS_SERVICE_ID = "ContactManagement.Customer.Query";

	/*
	 * (non-Javadoc)
	 * 
	 * @see cobiscorp.ecobis.ucsp.external.service.IClientExternalService#
	 * queryCustomerVisits(java.lang .Integer)
	 */
	@Override
	@PUT
	@Path("/queryCustomerVisits/{customerCode}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse queryCustomerVisits(
			@PathParam("customerCode") Integer customerCode) {
		try {
			if (logger.isDebugEnabled()) {
				logger.logDebug("queryCustomerVisits start");
			}
			ServiceResponse serviceResponse = new ServiceResponse();
			List<Customer> lstCustomer = new ArrayList<Customer>();
			int visitId = 0;
			Customer[] arrCustomer;
			serviceResponse.setResult(Boolean.TRUE);
			do {
				arrCustomer = executeQueryCustomerVisits(customerCode, visitId,
						serviceResponse);
				if (arrCustomer.length > 0) {
					for (Customer customer : arrCustomer) {
						lstCustomer.add(customer);
					}
					visitId = arrCustomer[arrCustomer.length-1].getId();
				}
			} while (arrCustomer.length > 0 && arrCustomer.length == 20 ); //Control de siguinetes
			serviceResponse.setData(lstCustomer);	
			if (logger.isDebugEnabled()) {
				logger.logDebug("queryCustomerVisits end");
			}
			return serviceResponse;
		} catch (Exception ex) {
			logger.logError(ex.getMessage());
			return this.manageException(ex, logger);
		}
	}

	private Customer[] executeQueryCustomerVisits(int customerCode,
			int visitId, ServiceResponse serviceResponse) {
		ServiceResponse serviceResp = null;
		try {
			ServiceRequestTO serviceRequestTO = new ServiceRequestTO();
			CustomerRequest customerRequest = new CustomerRequest();
			customerRequest.setCustomer(customerCode);
			customerRequest.setVisitId(visitId);
			serviceRequestTO.addValue("inCustomerRequest", customerRequest);
			serviceResp = execute(this.serviceIntegration, logger,
					QUERY_CUSTOMER_VISITS_SERVICE_ID, serviceRequestTO);
			ServiceResponseTO serviceResponseTO = (ServiceResponseTO) serviceResp
					.getData();
			Customer[] listResponse = (Customer[]) serviceResponseTO
					.getValue("returnCustomer");
			return listResponse;

		} catch (Exception ex) {			
			if (serviceResp != null) {
				List<MessageTO> lstMessageTO = new ArrayList<MessageTO>();
				for (Message msj : serviceResp.getMessages()) {
					MessageTO msjTO = new MessageTO(msj.getMessage());
					msjTO.setCode(msj.getCode());
					lstMessageTO.add(msjTO);
				}
				serviceResponse.addMessages(lstMessageTO);
				serviceResponse.setResult(serviceResp.isResult());
			}
			logger.logError(ex.getMessage(),ex);
			return new Customer[0];
		}
	}

	/**
	 * Method that set the instance of ICTSServiceIntegration
	 * 
	 * @param serviceIntegration
	 *            Instance of ICTSServiceIntegration
	 */
	public void setServiceIntegration(ICTSServiceIntegration serviceIntegration) {
		this.serviceIntegration = serviceIntegration;
	}

	/**
	 * Method that unset the instance of ICTSServiceIntegration
	 * 
	 * @param serviceIntegration
	 *            Instance of ICTSServiceIntegration
	 */
	public void unsetServiceIntegration(
			ICTSServiceIntegration serviceIntegration) {
		this.serviceIntegration = null;
	}

}