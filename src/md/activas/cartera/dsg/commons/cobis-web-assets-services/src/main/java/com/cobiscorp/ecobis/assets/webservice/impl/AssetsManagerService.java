/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package com.cobiscorp.ecobis.assets.webservice.impl;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;

import javax.ws.rs.Consumes;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.ReferenceCardinality;
import org.apache.felix.scr.annotations.Service;

import cobiscorp.ecobis.assets.cloud.dto.HpCatalogRequest;
import cobiscorp.ecobis.assets.cloud.dto.LoanSimulatorRequest;
import cobiscorp.ecobis.assets.cloud.dto.SolidarityPayment;
import cobiscorp.ecobis.assets.cloud.dto.UploadConciliationRequest;
import cobiscorp.ecobis.commons.dto.ServiceRequestTO;
import cobiscorp.ecobis.commons.dto.ServiceResponseTO;
import cobiscorp.ecobis.cts.integration.services.ICTSServiceIntegration;

import com.cobiscorp.cobis.commons.log.ILogger;
import com.cobiscorp.cobis.commons.log.LogFactory;
import com.cobiscorp.cobis.web.services.commons.model.ServiceResponse;
import com.cobiscorp.cobis.web.services.commons.utils.ServiceBase;
import com.cobiscorp.ecobis.assets.constants.Constants;
import com.cobiscorp.ecobis.assets.constants.RequestName;
import com.cobiscorp.ecobis.assets.constants.ServiceId;
import com.cobiscorp.ecobis.assets.dto.LoanSimulationDTO;
import com.cobiscorp.ecobis.assets.dto.PaymentDTO;
import com.cobiscorp.ecobis.assets.dto.PaymentRequest;
import com.cobiscorp.ecobis.assets.dto.SolidarityPaymentCustomerData;
import com.cobiscorp.ecobis.assets.dto.StructureDTO;
import com.cobiscorp.ecobis.assets.utils.Utilities;
import com.cobiscorp.ecobis.assets.webservice.IAssetsManagerService;

@Path("/cobis/web/assets/assetsServicesManager")
@Component
@Service({ AssetsManagerService.class })
public class AssetsManagerService extends ServiceBase implements IAssetsManagerService {

	@Reference(bind = "setServiceIntegration", unbind = "unsetServiceIntegration", cardinality = ReferenceCardinality.MANDATORY_UNARY)
	private ICTSServiceIntegration serviceIntegration;

	private ILogger logger = LogFactory.getLogger(AssetsManagerService.class);

	@Override
	@PUT
	@Path("/getPaymentOperatorStructure/{operatorId}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse getPaymentOperatorStructure(@PathParam("operatorId") String operatorId) {
		try {
			if (logger.isDebugEnabled()) {
				logger.logDebug("getPaymentOperatorStructure start");
			}

			ServiceResponse serviceResponse = new ServiceResponse();
			serviceResponse.setData(Utilities.getPaymentOperators(operatorId));
			serviceResponse.setResult(true);

			return serviceResponse;
		} catch (Exception ex) {
			return this.manageException(ex, logger);
		}
	}

	@Override
	@PUT
	@Path("/insertFileinTemp")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse insertFileinTemp(PaymentRequest paymentRequest) {
		ServiceResponse serviceResponse = new ServiceResponse();
		try {
			if (logger.isDebugEnabled()) {
				logger.logDebug("insertFileinTemp start");
			}
			Integer sequential = null;
			StructureDTO amountStructure = null, paymentDateStructure = null;
			if (paymentRequest != null) {

				if (paymentRequest.getPayments() != null && paymentRequest.getPayments().size() > 0 && paymentRequest.getStructures() != null
						&& paymentRequest.getStructures().size() > 0) {

					for (Map<String, StructureDTO> structure : paymentRequest.getStructures()) {
						logger.logDebug("Mapa: " + structure);

						for (Map.Entry<String, StructureDTO> entry : structure.entrySet()) {
							if (entry.getValue() != null && "amount".equals(entry.getValue().getValue())) {
								amountStructure = entry.getValue();
							}
							if (entry.getValue() != null && "paymentDate".equals(entry.getValue().getValue())) {
								paymentDateStructure = entry.getValue();
							}
						}

					}
					for (PaymentDTO payment : paymentRequest.getPayments()) {
						UploadConciliationRequest uploadConciliationRequest = new UploadConciliationRequest();
						uploadConciliationRequest.setReference(Utilities.getReference(payment.getReference()));
						uploadConciliationRequest.setAmount(Utilities.formatStringToDouble(payment.getAmount(), amountStructure));
						uploadConciliationRequest.setPaymentDate(Utilities.formatStringToCalendar(payment.getPaymentDate(), paymentDateStructure));
						uploadConciliationRequest.setSequential(sequential);
						uploadConciliationRequest.setFilename(payment.getFilename());
						uploadConciliationRequest.setOperator(payment.getOperator());

						ServiceRequestTO serviceRequest = new ServiceRequestTO();
						serviceRequest.addValue(RequestName.INUPLOADCONCILIATIONREQUEST, uploadConciliationRequest);

						ServiceResponse serviceResponseIns = this.execute(serviceIntegration, logger, ServiceId.INSERTFILEINTEMP_SERVICE_ID, serviceRequest);

						if (serviceResponseIns != null) {
							if (serviceResponseIns.isResult()) {

								ServiceResponseTO serviceResponseTO = (ServiceResponseTO) serviceResponseIns.getData();
								if (serviceResponseTO != null) {
									Map<String, String> insertResponse = (Map<String, String>) serviceResponseTO.getValue("com.cobiscorp.cobis.cts.service.response.output");

									if (insertResponse.get("@o_ssn") != null) {
										sequential = String.valueOf(insertResponse.get("@o_ssn")) == null ? 0 : Integer.parseInt(String.valueOf(insertResponse.get("@o_ssn")));

									}

								}
							}
						}

					}
				}
			}
			serviceResponse.setData(sequential);
			serviceResponse.setResult(true);
			return serviceResponse;

		} catch (Exception ex) {
			return this.manageException(ex, logger);
		}
	}

	@Override
	@PUT
	@Path("/uploadFile/{sequential}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse uploadFile(@PathParam("sequential") Integer sequential) {
		// TODO Auto-generated method stub
		try {
			if (logger.isDebugEnabled()) {
				logger.logDebug("uploadFile start");
			}

			UploadConciliationRequest uploadConciliationRequest = new UploadConciliationRequest();
			uploadConciliationRequest.setSequential(sequential);

			ServiceRequestTO serviceRequest = new ServiceRequestTO();
			serviceRequest.addValue(RequestName.INUPLOADCONCILIATIONREQUEST, uploadConciliationRequest);
			return this.execute(serviceIntegration, logger, ServiceId.UPLOADFILE_SERVICE_ID, serviceRequest);

		} catch (Exception ex) {
			return this.manageException(ex, logger);
		}
	}

	@Override
	@PUT
	@Path("/getCatalogs/{table}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse getCatalogs(@PathParam("table") String table) {
		// TODO Auto-generated method stub

		try {
			if (logger.isDebugEnabled()) {
				logger.logDebug("getCatalogs start");
			}

			HpCatalogRequest hpCatalogRequest = new HpCatalogRequest();
			hpCatalogRequest.setType('A');
			hpCatalogRequest.setTable(table);

			ServiceRequestTO serviceRequest = new ServiceRequestTO();
			serviceRequest.addValue(RequestName.INHPCATALOGREQUEST, hpCatalogRequest);
			return this.execute(serviceIntegration, logger, ServiceId.GETCATALOG_SERVICE_ID, serviceRequest);

		} catch (Exception ex) {
			return this.manageException(ex, logger);
		}
	}

	@Override
	@PUT
	@Path("/insertSolidarityPayment")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse insertSolidarityPayment(SolidarityPaymentCustomerData solidarityPaymentCustomerData) {

		try {

			SolidarityPayment solidarityPayment = new SolidarityPayment();
			solidarityPayment.setGroupId(solidarityPaymentCustomerData.getGroupId());
			solidarityPayment.setAffectsSavings(solidarityPaymentCustomerData.getAffectsSavings());
			solidarityPayment.setAmount(solidarityPaymentCustomerData.getAmount() == null ? null : BigDecimal.valueOf(solidarityPaymentCustomerData.getAmount().doubleValue()));
			solidarityPayment.setPaymentsDetail(solidarityPaymentCustomerData.getPaymentsDetail());

			ServiceRequestTO serviceRequest = new ServiceRequestTO();
			serviceRequest.addValue(RequestName.INSOLIDARITYPAYMENT, solidarityPayment);

			return this.execute(serviceIntegration, logger, ServiceId.INSERTSOLIDARITYPAYMENT_SERVICE_ID, serviceRequest);

		} catch (Exception ex) {
			return this.manageException(ex, logger);
		}
	}

	@Override
	@PUT
	@Path("/loanSimulation")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse loanSimulation(LoanSimulationDTO loanSmulation) {
		try {

			logger.logDebug("Start loanSimulation");

			LoanSimulatorRequest loanSimulationRequest = new LoanSimulatorRequest();
			loanSimulationRequest.setCustomerId(loanSmulation.getCustomerId());
			loanSimulationRequest.setAmount(loanSmulation.getAmount() == null ? 0.0 : loanSmulation.getAmount().doubleValue());
			loanSimulationRequest.setCurrency(loanSmulation.getCurrency());
			loanSimulationRequest.setFrequency(loanSmulation.getFrecuency());
			loanSimulationRequest.setRate(loanSmulation.getRate() == null ? null : loanSmulation.getRate());
			loanSimulationRequest.setTerm(loanSmulation.getTerm() == null ? 0 : loanSmulation.getTerm());
			loanSimulationRequest.setOperationtype(loanSmulation.getOperationType());
			if (loanSmulation.getInitialDate() == null) {
				loanSimulationRequest.setInitialDate(null);
			} else {
				Calendar calendar = Calendar.getInstance();
				DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
				Date date = format.parse(loanSmulation.getInitialDate());
				calendar.setTime(date);
				loanSimulationRequest.setInitialDate(calendar);

			}
			ServiceRequestTO serviceRequest = new ServiceRequestTO();
			serviceRequest.addValue(RequestName.INLOANSIMULATIONREQUEST, loanSimulationRequest);

			return this.execute(serviceIntegration, logger, ServiceId.LOANSIMULATION_SERVICE_ID, serviceRequest);

		} catch (Exception ex) {
			return this.manageException(ex, logger);
		} finally {
			logger.logDebug("Finish loanSimulation");
		}
	}

	/**
	 * Method that set the instance of ICTSServiceIntegration
	 * 
	 * @param serviceIntegration
	 *            Instance of ICTSServiceIntegration
	 */
	public void setServiceIntegration(ICTSServiceIntegration serviceIntegration) {
		this.serviceIntegration = serviceIntegration;
	}

	/**
	 * Method that unset the instance of ICTSServiceIntegration
	 * 
	 * @param serviceIntegration
	 *            Instance of ICTSServiceIntegration
	 */
	public void unsetServiceIntegration(ICTSServiceIntegration serviceIntegration) {
		this.serviceIntegration = null;
	}

}